[{"content":"","date":"18 October 2023","permalink":"/tags/containers/","section":"Tags","summary":"","title":"containers"},{"content":"","date":"18 October 2023","permalink":"/tags/docker/","section":"Tags","summary":"","title":"docker"},{"content":"Introduction # After a month long sprint into learning Golang i decided to rewrite code from my undergrad project from a PHP, MySQL, React stack into a “modern” stack using Go, Supabase for data storage and Flutter as the frontend for a mobile application. After two days writing and debugging code, it was finally time to build and deploy the application. In my attempt to deploy the application locally I got frustrated with the fact that the application needed to run constantly in the background of my main development computer thus if I needed to shutdown the application also stops working. To solve this conundrum I decided to deploy to a remote VPS with docker. This begun my attempt at pacakging my code to run in a container environment.\nPrerequisites # To begin the process of deploying your go application on docker you would need to install the following in your dev environment, this guide assumes you have the necessary software to run Go.\n Docker Desktop: Docker Desktop provides a GUI that lets you manage containers and images on your local machine. Follow this link to install. If you want to share your images or collaborate with other devs you’d need to create a Docker Hub account where you can upload your container images. Run the command below in your CLI to confirm installation.  $ docker –-version An IDE or Text Editor: In this guide I will be making use of Virtual Studio Code. Follow this link to install.  Dockerizing your Application # To begin, navigate into your applications directory in your CLI\n      This guide assumes your go application is named index.go  From your terminal run the command “go run .” to test if your code works as expected.\n$ go run . If your application successfully runs locally without an error, we are ready to containerize it.\nCreating a Dockerfile # In order to build a container image with Docker we would need a Dockerfile which contains the required build instructions. Using the docker build command with a Dockerfile present in the directory we created, an automated build will execute the instructions specified in succession.\nIn the root of your project create a Dockerfile named “Dockerfile” with no extension.\n   Next we tell Docker what base image we would like to use for our application:\nFROM golang:1.21.3-alpine In the guide we use the official Go Image which has all the necessary libraries to compile and run our Go application.\nNow that the base image for our container image has been defined we can build on it.\nNext we create a new directory within the Docker image we’re building using the command WORKDIR /app, this instructs Docker to use the directory as our default location for subsequent commands.\nWORKDIR /app Next, we copy the content from our go.mod and go.sum files into the new directory we created using the COPY command.\nCOPY go.mod go.sum ./ Now that we have our go module files in the directory we can use the RUN command to execute and install the Go modules into the directory.\nRUN go mod download Now that we have all the necessary Go dependencies installed within our image we copy the source code into the image using the command below.\nCOPY *.go ./ This command copies all the files with the .go extension from our root directory into the image.\nThe next step is to build our application. To do so, we use the RUN command as well as the go build command to build our Go app.\nRUN go build -o /GO-POSTGRES-ESP32    “/GO-POSTGRES-ESP32” should be changed to the name of the folder your Go source code resides in.  Next we tell Docker which command to run when our image is used to start a container.\nCMD [ \u0026#34;/GO-POSTGRES-ESP32\u0026#34; ] Below is the complete Dockerfile:\nFROM golang:1.21.3-alpine WORKDIR /app COPY go.mod go.sum ./ RUN go mod download COPY *.go ./ RUN go build -o /GO-POSTGRES-ESP32 EXPOSE 8080 CMD [ \u0026#34;/GO-POSTGRES-ESP32\u0026#34; ] Building the Docker image # To build an image from our Dockerfile we use the command docker build in our CLI. We can include a tag with -t or –tag to label our image, docker will use the label latest if this value is not present.\n$ docker build -t go-postgres-esp32 .    After Docker has successfully built the image you can use the command docker images to view your image along with its tag.\n$ docker images    Running our custom image # To run our image as a container we use the docker run command along with the name of the image.\n$ docker run go-postgres-esp32    Bonus # Using your host IP in your container # You may need to connect to the host network within a Docker container to access other services running locally on your host machine. To do this we would need to create a docker-compose file to define our containers configuration options such as networks and volumes. To begin we create a “docker-compose.yml” file with our IDE or text editor. Then we add the code below inside that defines our applications image, port number and environment variable.\nversion: \u0026#39;3.7\u0026#39; services: app: image: index:latest ports: - \u0026#34;8080:8080\u0026#34; environment: DB_UPSTREAM: http://${DOCKER_GATEWAY_HOST:-host.docker.internal}:3000 The secret sauce here is the DB_UPSTREAM environment variable DB_UPSTREAM: http://${DOCKER_GATEWAY_HOST:-host.docker.internal}:3000. This points to the hosts IP and port 3000, this tells Docker to use the env variable DOCKER_GATEWAY_HOST when resolving the IP.\nTo run the docker-compose.yml file use the command docker-compose up -d and to stop the container use the command docker-compose down.\n$ docker-compose up -d ","date":"18 October 2023","permalink":"/posts/go-docker/","section":"Posts","summary":"In this blog post I walk through how to package your Golang applications into a docker image to be deployed anywhere.","title":"Dockerizing and Deploying a Go Application"},{"content":"BSc. Information \u0026amp; Communication Tech. student at GIMPA  I\u0026rsquo;m Enoch Cobbina, a GIMPA graduate with a Bachelors of Science in Information \u0026amp; Communication Technology.\nI'm passionate about Data Analytics and DevOps, leveraging principles from both to drive efficiency, innovation, and decision-making.\n Curriculum Vitae (CV)  ","date":"18 October 2023","permalink":"/","section":"Enoch Cobbina","summary":"BSc. Information \u0026amp; Communication Tech.","title":"Enoch Cobbina"},{"content":"","date":"18 October 2023","permalink":"/tags/golang/","section":"Tags","summary":"","title":"Golang"},{"content":"","date":"18 October 2023","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"18 October 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"30 July 2023","permalink":"/tags/ubuntu/","section":"Tags","summary":"","title":"ubuntu"},{"content":"Introduction # In part two of our web hosting series we will guide you through the process of setting up your own web server using Ubuntu, we install Docker Desktop and configure a static IP for our server. Additionally, we will explain how to test your network to ensure it is not blocked behind ISP CGNAT (Carrier-Grade Network Address Translation), which could hinder your ability to host a website.\nInstalling Ubuntu # Installing Ubuntu is a straightforward process, and there are numerous guides available online that provide step-by-step instructions. Whether you want to install it on a physical machine or in a virtual environment, you can find comprehensive tutorials on YouTube. For a visual walkthrough, you can check out this video from Learn Linux TV:\n  For a quick walkthrough on how this is done follow these steps:\n Download the latest Ubuntu Server ISO from the official website (https://ubuntu.com/download/desktop). Create a bootable USB drive with the Ubuntu ISO using tools like Rufus or Etcher. Enter your computers BIOS and select the bootable drive as the primary boot drive Boot your computer from the USB drive, follow the on-screen instructions, and complete the installation of Ubuntu Desktop.  Installing Docker Desktop # Docker is an open-source platform that allows you to develop and run applications inside containers. Containers are lightweight and isolated environments that package all the necessary dependencies required to run an application. In upcoming blog post, we will explore how to use Docker to install Nginx Proxy Manager and Umami for web analytics.\n  Go to the official Docker website and download the latest DEB package. (https://docs.docker.com/desktop/install/ubuntu/#install-docker-desktop)\n  Open a new terminal from the download folder or type the command\n  $ cd Downloads Install the package using the following commands  $ sudo apt-get update $ sudo apt-get install ./docker-desktop-\u0026lt;version\u0026gt;-\u0026lt;arch\u0026gt;.deb After the install is complete type the following command to open Docker Desktop  $ sudo systemctl --user start docker-desktop You can check the Docker versions by running the following commands:  $ docker compose version $ docker --version Setting Up Static IP Addresses # Static IP addresses are essential for hosting a website because they provide a fixed address for your server or machine. When hosting a website, you want your server\u0026rsquo;s IP address to remain constant so visitors can always reach it without any changes, it also allows the reverse proxy application to forward requests to local services without any hiccups. DHCP (Dynamic Host Configuration Protocol) dynamically assigns IP addresses, and if your server\u0026rsquo;s IP changes, it can lead to website downtime.\nLet\u0026rsquo;s explore how to setup a static IP:\n  Click on the network icon in the top-right corner of the screen.\n  Select \u0026ldquo;Settings\u0026rdquo; or \u0026ldquo;Edit Connections,\u0026rdquo; depending on the version of Ubuntu you are using.\n  In the \u0026ldquo;Network Connections\u0026rdquo; window, locate your active network connection (usually Wi-Fi) and click on the gear/settings icon.\n  In the connection settings window, go to the \u0026ldquo;IPv4\u0026rdquo; tab.\n  Change the \u0026ldquo;Method\u0026rdquo; from \u0026ldquo;Automatic (DHCP)\u0026rdquo; to \u0026ldquo;Manual.\u0026rdquo;\n  In the \u0026ldquo;Address\u0026rdquo; field, enter the static IP address you want to assign to your computer (e.g., 192.168.1.10)\n  In the \u0026ldquo;Netmask\u0026rdquo; field, enter the subnet mask for your network (e.g., 255.255.255.0 - for Class C subnets).\n  In the \u0026ldquo;Gateway\u0026rdquo; field, enter the default gateway IP address (e.g., 192.168.1.1).\n  In the \u0026ldquo;DNS Servers\u0026rdquo; field, enter the IP addresses of the DNS servers you want to use (e.g., 8.8.8.8, 8.8.4.4 for Google DNS or 1.1.1.1 for Cloudflare).\n  Click \u0026ldquo;Apply\u0026rdquo; or \u0026ldquo;Save\u0026rdquo; to save the changes.\n  Restart your network connection to apply the static IP configuration.\n  After following these steps, your Ubuntu Desktop will have a static IP address, which means it will always use the same IP when connecting to your local network. Make sure to choose an IP address that is not already in use by other devices on your network to avoid conflicts.\nTesting for CGNAT # CGNAT is used by some ISPs to conserve public IP addresses and share a single public IP address among multiple users. This can cause issues when hosting a website because your server will not have a unique public IP address, making it unreachable from the internet.\nTo test for CGNAT, you can use online tools like \u0026ldquo;icanhazip\u0026rdquo; (https://icanhazip.com/) to check your public IP address. Make a note of this IP address.\nOpen a new terminal with the shortcut Ctrl + Alt + T\nRun the command traceroute \u0026ldquo;your-ip\u0026rdquo;\n$ traceroute your-ip    install traceroute with \u0026ldquo;sudo apt install traceroute\u0026rdquo;  To confirm there isnt an extra NAT layer, look for only 1 hop - If theres more than 1 hop then you cannot set that IP for any your self-hosted services.\n   ","date":"30 July 2023","permalink":"/posts/part2/","section":"Posts","summary":"Part two of the web hosting series explains setting up a web server using Ubuntu. It covers installing Ubuntu, Docker Desktop, configuring a static IP address, and testing for CGNAT.","title":"Ubuntu Server Setup and Docker Install"},{"content":"","date":"16 July 2023","permalink":"/tags/cloudflare/","section":"Tags","summary":"","title":"cloudflare"},{"content":"Introduction # Welcome to part one of a multipart blog series that will guide you through self-hosting a website or service like a VPN. Today, we embark on a journey through the intricate world of domains—those digital addresses that give our websites a unique identity. Whether you\u0026rsquo;re a seasoned web developer or newbie, understanding what a domain is and how to acquire one is a crucial step towards establishing an online presence.\nThe domain name is the part of the address that is unique to your website. For example, in \u0026ldquo;www.selfhost.com\u0026rdquo; \u0026ldquo;selfhost\u0026rdquo; is the domain name while \u0026ldquo;.com\u0026rdquo; is the domain extension/top-level domain that comes after the domain name. Popular examples include .com, .org, .net, and country-specific extensions like .gh or .uk. Some domains also include subdomains like \u0026ldquo;www\u0026rdquo; and \u0026ldquo;app\u0026rdquo; that appear before the domain name. eg \u0026ldquo;app.selfhost.com\u0026rdquo;.\nWhat is a Domain? # In simple terms, a domain is the address that people use to access your website on the internet. It\u0026rsquo;s a unique identifier that allows users to locate and interact with your website. Domains typically consist of two main components: the domain name and domain extension.\nAcquiring a Domain from Cloudflare # Cloudflare, a renowned provider of web infrastructure services offers domain registrar services. Cloudflare also provides free SSL Certificates, DNSSEC and DDoS Protection for its customers. DNSSEC secures DNS records with cryptographic signatures to verify the authenticity of domains. To acquire a domain with Cloudflare, follow these steps:\n  Visit (www.cloudflare.com) and create an account if you haven\u0026rsquo;t already. It\u0026rsquo;s free and requires only an email address and a secure password.\n  Once logged in, navigate to the \u0026ldquo;Domain Registration\u0026rdquo; section and click on \u0026ldquo;Register Domain.\u0026rdquo;\n  Enter the desired domain name in the search bar. Cloudflare will display available domain options with various extensions. Choose the one that best suits your needs.\n  Proceed to the checkout process, review the terms and pricing, and complete the purchase.    Note that you will need to pay an annual fee starting at $8 to renew your domain       Acquiring a Domain from Dynadot # For cheaper and a wider array of domain extensions, Dynadot provides a straightforward process for acquiring your dream domain. I will however recommend you transfer your domain to Cloudflare as future guides will be referencing and utilizing Cloudflare services. To transfer a domain to Cloudflare follow this guide.\nLet\u0026rsquo;s explore how to secure a domain through Dynadot:\n  Visit the Dynadot website (www.dynadot.com) and create an account if you\u0026rsquo;re a new user. Fill in the necessary details, including your email and password.\n  Once logged in, enter the desired domain name in the search bar on the homepage. Dynadot will display available domain options, along with their corresponding prices.\n  Select the desired domain name and extension combination from the search results.\n  Review the details of your selected domain and proceed to the checkout page. Skip any additional services or features, such as domain privacy as we will be transferring the domain to Cloudflare.\n        Pay attention to the renewal cost as that will be the annual fee for your domain.  Conclusion # Congratulations! You\u0026rsquo;ve successfully acquired your very own domain. In part two of Web Master Mastery we will be setting up the hardware needed for containerization and evaluating if our network supports self-hosting.\n","date":"16 July 2023","permalink":"/posts/part1/","section":"Posts","summary":"This is the first of a series on self-hosting websites and services. It explores the concept of domains as unique internet addresses and explains how to acquire one using Cloudflare\u0026rsquo;s domain registrar services.","title":"Demystifying Domains: A Guide to Acquiring Your Own"},{"content":"","date":"16 July 2023","permalink":"/tags/domains/","section":"Tags","summary":"","title":"domains"},{"content":"","date":"16 July 2023","permalink":"/tags/dynadot/","section":"Tags","summary":"","title":"dynadot"},{"content":"","date":"16 July 2023","permalink":"/tags/hugo/","section":"Tags","summary":"","title":"hugo"},{"content":"Summary # As a Bachelor of Science student in Information \u0026amp; Communication Technology at the Ghana Institute of Management \u0026amp; Public Administration, I am passionate about pursuing a career as a data analyst. With a keen interest in data analysis, I completed a Google certification course in Data Analytics in December 2022, where I acquired skills in Data Cleaning to Performing Data Analysis with R programming. I have a solid foundation in IT Auditing, Software Engineering, Database Design, Computer \u0026amp; Information Security, and Object-Oriented Programming. I am excited to apply my skills and knowledge in analyzing complex data sets and providing valuable insights that drive business decisions.\nEducation #   (2019 \u0026ndash; Present) BSc in Information \u0026amp; Communication Technology \u0026ndash; Ghana Institute of Management and Public Administration, Accra, Ghana\n CGPA: 3.59/4.0 Relevant Coursework:  IT Auditing: Developed audit strategies and techniques to evaluate and manage risks in IT systems. Software Engineering: Incorporated design thinking skills and knowledge of the software development cycle in developing prototypes of solutions to a commercial problem. Computer \u0026amp; Information Security: Analyzed and assessed security risks in IT systems and developed strategies to mitigate them. Advanced-Data Communications and Networking: Explored network protocols and architectures for wired and wireless networks. Database Design: Designed and implemented relational databases using SQL. Object-Oriented Programming: Developed software using Java and Python. Project Management: Developed project plans, schedules, and managed project resources.      (September, 2014 \u0026ndash; April, 2017) Diploma in General Arts \u0026ndash; Mfantsipim Senior High School\n Clubs \u0026amp; Societies:  President - Photography Club: Organized and led club activities, exhibited photos at 141st Speech Day at Mfantsipim School and Rotary Club Cape Coast, 2017. Robotics Club: Built robots and participated in inter-class robotics competitions.      Certifications #   (August, 2023) Oracle Cloud Infrastructure 2023 Certified DevOps Professional \u0026ndash; Oracle\n See certifications or PDF    (August, 2023) Oracle Cloud Infrastructure 2023 Certified Foundations Associate \u0026ndash; Oracle\n See certifications    (December, 2022) Google Data Analytics \u0026ndash; Coursera\n See certifications    Technical skills \u0026amp; languages # Technical #  Golang R (RStudio, R Markdown): Performed data cleaning, and analysis using R. Tableau: Created visualizations and dashboards to communicate insights. GitHub: Managed code repositories and collaborated with team members. Microsoft Office: Proficient in Word, Excel, and PowerPoint.  Languages #  English (fluent) Fante  Skills #  Skilled in using R (RStudio, R Markdown) for data cleaning and analysis. Proficient in Tableau for data visualization. Familiarity with GitHub and Visual Studio Code for version control and project management. Knowledgeable in Microsoft Azure for cloud computing. Great work ethic and problem-solving skills. Excellent verbal and written communication skills.  Download CV  ","date":"29 January 2023","permalink":"/cv/","section":"Enoch Cobbina","summary":"Summary # As a Bachelor of Science student in Information \u0026amp; Communication Technology at the Ghana Institute of Management \u0026amp; Public Administration, I am passionate about pursuing a career as a data analyst.","title":"CV"},{"content":"Ghana Civil Aviation Authority Dashboard\n     var divElement = document.getElementById('viz1677530750633'); var vizElement = divElement.getElementsByTagName('object')[0]; vizElement.style.width='1360px';vizElement.style.height='987px'; var scriptElement = document.createElement('script'); scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js'; vizElement.parentNode.insertBefore(scriptElement, vizElement);  The goal for this visualization was to create a dashboard for the management of the Ghana Civil Aviation Authority so they could better understand current market conditions and trends which allows them to identify efficient ways of conducting business, saving time and money.\nData for this visualization was obtained from the GCAA website where it is made publicly available.\n   Financial Data was calculated using per passenger, flight and freight fees set by the organization and may not be an accurate represention of actual revenue.  ","date":"1 January 0001","permalink":"/projects/","section":"Enoch Cobbina","summary":"Ghana Civil Aviation Authority Dashboard","title":"Projects"}]